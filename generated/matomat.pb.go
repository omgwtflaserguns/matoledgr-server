// Code generated by protoc-gen-go. DO NOT EDIT.
// source: matomat.proto

/*
Package matomat is a generated protocol buffer package.

It is generated from these files:
	matomat.proto

It has these top-level messages:
	ProductRequest
	ProductList
	Product
	AccountRequest
	RegisterResponse
	LoginResponse
	GetAccountRequest
	GetAccountResponse
	User
*/
package matomat

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type RegisterStatus int32

const (
	RegisterStatus_REGISTER_OK                         RegisterStatus = 0
	RegisterStatus_REGISTER_FAILED                     RegisterStatus = 1
	RegisterStatus_REGISTER_FAILED_NAME_ALREADY_IN_USE RegisterStatus = 2
	RegisterStatus_REGISTER_FAILED_PASSWORD_INVALID    RegisterStatus = 3
)

var RegisterStatus_name = map[int32]string{
	0: "REGISTER_OK",
	1: "REGISTER_FAILED",
	2: "REGISTER_FAILED_NAME_ALREADY_IN_USE",
	3: "REGISTER_FAILED_PASSWORD_INVALID",
}
var RegisterStatus_value = map[string]int32{
	"REGISTER_OK":                         0,
	"REGISTER_FAILED":                     1,
	"REGISTER_FAILED_NAME_ALREADY_IN_USE": 2,
	"REGISTER_FAILED_PASSWORD_INVALID":    3,
}

func (x RegisterStatus) String() string {
	return proto.EnumName(RegisterStatus_name, int32(x))
}
func (RegisterStatus) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type LoginStatus int32

const (
	LoginStatus_LOGIN_OK     LoginStatus = 0
	LoginStatus_LOGIN_FAILED LoginStatus = 1
)

var LoginStatus_name = map[int32]string{
	0: "LOGIN_OK",
	1: "LOGIN_FAILED",
}
var LoginStatus_value = map[string]int32{
	"LOGIN_OK":     0,
	"LOGIN_FAILED": 1,
}

func (x LoginStatus) String() string {
	return proto.EnumName(LoginStatus_name, int32(x))
}
func (LoginStatus) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

type ProductRequest struct {
}

func (m *ProductRequest) Reset()                    { *m = ProductRequest{} }
func (m *ProductRequest) String() string            { return proto.CompactTextString(m) }
func (*ProductRequest) ProtoMessage()               {}
func (*ProductRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type ProductList struct {
	Products []*Product `protobuf:"bytes,1,rep,name=products" json:"products,omitempty"`
}

func (m *ProductList) Reset()                    { *m = ProductList{} }
func (m *ProductList) String() string            { return proto.CompactTextString(m) }
func (*ProductList) ProtoMessage()               {}
func (*ProductList) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *ProductList) GetProducts() []*Product {
	if m != nil {
		return m.Products
	}
	return nil
}

type Product struct {
	Id    int32   `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	Name  string  `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	Price float32 `protobuf:"fixed32,3,opt,name=price" json:"price,omitempty"`
}

func (m *Product) Reset()                    { *m = Product{} }
func (m *Product) String() string            { return proto.CompactTextString(m) }
func (*Product) ProtoMessage()               {}
func (*Product) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *Product) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *Product) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Product) GetPrice() float32 {
	if m != nil {
		return m.Price
	}
	return 0
}

type AccountRequest struct {
	Username string `protobuf:"bytes,1,opt,name=username" json:"username,omitempty"`
	Password string `protobuf:"bytes,2,opt,name=password" json:"password,omitempty"`
}

func (m *AccountRequest) Reset()                    { *m = AccountRequest{} }
func (m *AccountRequest) String() string            { return proto.CompactTextString(m) }
func (*AccountRequest) ProtoMessage()               {}
func (*AccountRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *AccountRequest) GetUsername() string {
	if m != nil {
		return m.Username
	}
	return ""
}

func (m *AccountRequest) GetPassword() string {
	if m != nil {
		return m.Password
	}
	return ""
}

type RegisterResponse struct {
	Status RegisterStatus `protobuf:"varint,1,opt,name=status,enum=matomat.RegisterStatus" json:"status,omitempty"`
}

func (m *RegisterResponse) Reset()                    { *m = RegisterResponse{} }
func (m *RegisterResponse) String() string            { return proto.CompactTextString(m) }
func (*RegisterResponse) ProtoMessage()               {}
func (*RegisterResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *RegisterResponse) GetStatus() RegisterStatus {
	if m != nil {
		return m.Status
	}
	return RegisterStatus_REGISTER_OK
}

type LoginResponse struct {
	Status LoginStatus `protobuf:"varint,1,opt,name=status,enum=matomat.LoginStatus" json:"status,omitempty"`
	User   *User       `protobuf:"bytes,2,opt,name=user" json:"user,omitempty"`
}

func (m *LoginResponse) Reset()                    { *m = LoginResponse{} }
func (m *LoginResponse) String() string            { return proto.CompactTextString(m) }
func (*LoginResponse) ProtoMessage()               {}
func (*LoginResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *LoginResponse) GetStatus() LoginStatus {
	if m != nil {
		return m.Status
	}
	return LoginStatus_LOGIN_OK
}

func (m *LoginResponse) GetUser() *User {
	if m != nil {
		return m.User
	}
	return nil
}

type GetAccountRequest struct {
}

func (m *GetAccountRequest) Reset()                    { *m = GetAccountRequest{} }
func (m *GetAccountRequest) String() string            { return proto.CompactTextString(m) }
func (*GetAccountRequest) ProtoMessage()               {}
func (*GetAccountRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

type GetAccountResponse struct {
	Authenticated bool  `protobuf:"varint,1,opt,name=authenticated" json:"authenticated,omitempty"`
	User          *User `protobuf:"bytes,2,opt,name=user" json:"user,omitempty"`
}

func (m *GetAccountResponse) Reset()                    { *m = GetAccountResponse{} }
func (m *GetAccountResponse) String() string            { return proto.CompactTextString(m) }
func (*GetAccountResponse) ProtoMessage()               {}
func (*GetAccountResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

func (m *GetAccountResponse) GetAuthenticated() bool {
	if m != nil {
		return m.Authenticated
	}
	return false
}

func (m *GetAccountResponse) GetUser() *User {
	if m != nil {
		return m.User
	}
	return nil
}

type User struct {
	Username string `protobuf:"bytes,1,opt,name=username" json:"username,omitempty"`
}

func (m *User) Reset()                    { *m = User{} }
func (m *User) String() string            { return proto.CompactTextString(m) }
func (*User) ProtoMessage()               {}
func (*User) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

func (m *User) GetUsername() string {
	if m != nil {
		return m.Username
	}
	return ""
}

func init() {
	proto.RegisterType((*ProductRequest)(nil), "matomat.ProductRequest")
	proto.RegisterType((*ProductList)(nil), "matomat.ProductList")
	proto.RegisterType((*Product)(nil), "matomat.Product")
	proto.RegisterType((*AccountRequest)(nil), "matomat.AccountRequest")
	proto.RegisterType((*RegisterResponse)(nil), "matomat.RegisterResponse")
	proto.RegisterType((*LoginResponse)(nil), "matomat.LoginResponse")
	proto.RegisterType((*GetAccountRequest)(nil), "matomat.GetAccountRequest")
	proto.RegisterType((*GetAccountResponse)(nil), "matomat.GetAccountResponse")
	proto.RegisterType((*User)(nil), "matomat.User")
	proto.RegisterEnum("matomat.RegisterStatus", RegisterStatus_name, RegisterStatus_value)
	proto.RegisterEnum("matomat.LoginStatus", LoginStatus_name, LoginStatus_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Products service

type ProductsClient interface {
	ListProducts(ctx context.Context, in *ProductRequest, opts ...grpc.CallOption) (*ProductList, error)
}

type productsClient struct {
	cc *grpc.ClientConn
}

func NewProductsClient(cc *grpc.ClientConn) ProductsClient {
	return &productsClient{cc}
}

func (c *productsClient) ListProducts(ctx context.Context, in *ProductRequest, opts ...grpc.CallOption) (*ProductList, error) {
	out := new(ProductList)
	err := grpc.Invoke(ctx, "/matomat.Products/ListProducts", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Products service

type ProductsServer interface {
	ListProducts(context.Context, *ProductRequest) (*ProductList, error)
}

func RegisterProductsServer(s *grpc.Server, srv ProductsServer) {
	s.RegisterService(&_Products_serviceDesc, srv)
}

func _Products_ListProducts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProductRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductsServer).ListProducts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/matomat.Products/ListProducts",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductsServer).ListProducts(ctx, req.(*ProductRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Products_serviceDesc = grpc.ServiceDesc{
	ServiceName: "matomat.Products",
	HandlerType: (*ProductsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListProducts",
			Handler:    _Products_ListProducts_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "matomat.proto",
}

// Client API for Account service

type AccountClient interface {
	Register(ctx context.Context, in *AccountRequest, opts ...grpc.CallOption) (*RegisterResponse, error)
	Login(ctx context.Context, in *AccountRequest, opts ...grpc.CallOption) (*LoginResponse, error)
	GetAccount(ctx context.Context, in *GetAccountRequest, opts ...grpc.CallOption) (*GetAccountResponse, error)
}

type accountClient struct {
	cc *grpc.ClientConn
}

func NewAccountClient(cc *grpc.ClientConn) AccountClient {
	return &accountClient{cc}
}

func (c *accountClient) Register(ctx context.Context, in *AccountRequest, opts ...grpc.CallOption) (*RegisterResponse, error) {
	out := new(RegisterResponse)
	err := grpc.Invoke(ctx, "/matomat.Account/Register", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountClient) Login(ctx context.Context, in *AccountRequest, opts ...grpc.CallOption) (*LoginResponse, error) {
	out := new(LoginResponse)
	err := grpc.Invoke(ctx, "/matomat.Account/Login", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountClient) GetAccount(ctx context.Context, in *GetAccountRequest, opts ...grpc.CallOption) (*GetAccountResponse, error) {
	out := new(GetAccountResponse)
	err := grpc.Invoke(ctx, "/matomat.Account/GetAccount", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Account service

type AccountServer interface {
	Register(context.Context, *AccountRequest) (*RegisterResponse, error)
	Login(context.Context, *AccountRequest) (*LoginResponse, error)
	GetAccount(context.Context, *GetAccountRequest) (*GetAccountResponse, error)
}

func RegisterAccountServer(s *grpc.Server, srv AccountServer) {
	s.RegisterService(&_Account_serviceDesc, srv)
}

func _Account_Register_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AccountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountServer).Register(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/matomat.Account/Register",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountServer).Register(ctx, req.(*AccountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Account_Login_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AccountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountServer).Login(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/matomat.Account/Login",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountServer).Login(ctx, req.(*AccountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Account_GetAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAccountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountServer).GetAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/matomat.Account/GetAccount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountServer).GetAccount(ctx, req.(*GetAccountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Account_serviceDesc = grpc.ServiceDesc{
	ServiceName: "matomat.Account",
	HandlerType: (*AccountServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Register",
			Handler:    _Account_Register_Handler,
		},
		{
			MethodName: "Login",
			Handler:    _Account_Login_Handler,
		},
		{
			MethodName: "GetAccount",
			Handler:    _Account_GetAccount_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "matomat.proto",
}

func init() { proto.RegisterFile("matomat.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 501 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x54, 0x5d, 0x8f, 0x93, 0x40,
	0x14, 0x5d, 0xfa, 0xb1, 0xc5, 0xdb, 0x96, 0xc5, 0xd9, 0xc6, 0xad, 0xf8, 0x82, 0xe3, 0x26, 0x36,
	0x9b, 0x75, 0x4d, 0xf0, 0x4d, 0x1f, 0x94, 0x6c, 0xb1, 0x92, 0xc5, 0x76, 0x33, 0xb8, 0x1a, 0x1f,
	0x0c, 0x22, 0x9d, 0xac, 0x3c, 0x14, 0x90, 0x19, 0xe2, 0x2f, 0xf0, 0xff, 0xf9, 0x93, 0x0c, 0x03,
	0x8c, 0xa5, 0x55, 0xe3, 0x1b, 0xe7, 0xde, 0x73, 0xce, 0xdc, 0xb9, 0x73, 0x02, 0x8c, 0x37, 0x21,
	0x4f, 0x37, 0x21, 0xbf, 0xc8, 0xf2, 0x94, 0xa7, 0x68, 0x50, 0x43, 0xac, 0x83, 0x76, 0x9d, 0xa7,
	0xeb, 0x22, 0xe2, 0x84, 0x7e, 0x2b, 0x28, 0xe3, 0xf8, 0x05, 0x0c, 0xeb, 0x8a, 0x17, 0x33, 0x8e,
	0xce, 0x41, 0xcd, 0x2a, 0xc8, 0xa6, 0x8a, 0xd9, 0x9d, 0x0d, 0x2d, 0xfd, 0xa2, 0xf1, 0x6a, 0x94,
	0x92, 0x81, 0x2f, 0x61, 0x50, 0x17, 0x91, 0x06, 0x9d, 0x78, 0x3d, 0x55, 0x4c, 0x65, 0xd6, 0x27,
	0x9d, 0x78, 0x8d, 0x10, 0xf4, 0x92, 0x70, 0x43, 0xa7, 0x1d, 0x53, 0x99, 0xdd, 0x21, 0xe2, 0x1b,
	0x4d, 0xa0, 0x9f, 0xe5, 0x71, 0x44, 0xa7, 0x5d, 0x53, 0x99, 0x75, 0x48, 0x05, 0xf0, 0x1b, 0xd0,
	0xec, 0x28, 0x4a, 0x8b, 0xa4, 0x99, 0x09, 0x19, 0xa0, 0x16, 0x8c, 0xe6, 0x42, 0xaf, 0x08, 0xbd,
	0xc4, 0x65, 0x2f, 0x0b, 0x19, 0xfb, 0x9e, 0xe6, 0xeb, 0xda, 0x5b, 0x62, 0x7c, 0x09, 0x3a, 0xa1,
	0xb7, 0x31, 0xe3, 0x34, 0x27, 0x94, 0x65, 0x69, 0xc2, 0x28, 0x7a, 0x0a, 0x87, 0x8c, 0x87, 0xbc,
	0x60, 0xc2, 0x49, 0xb3, 0x4e, 0xe4, 0x75, 0x1a, 0xaa, 0x2f, 0xda, 0xa4, 0xa6, 0xe1, 0xcf, 0x30,
	0xf6, 0xd2, 0xdb, 0x38, 0x91, 0x0e, 0xe7, 0x3b, 0x0e, 0x13, 0xe9, 0x20, 0x78, 0x6d, 0x39, 0x7a,
	0x08, 0xbd, 0x72, 0x56, 0x31, 0xdb, 0xd0, 0x1a, 0x4b, 0xee, 0x0d, 0xa3, 0x39, 0x11, 0x2d, 0x7c,
	0x0c, 0x77, 0x17, 0x94, 0xb7, 0xef, 0x8c, 0x3f, 0x01, 0xda, 0x2e, 0xd6, 0x67, 0x9f, 0xc2, 0x38,
	0x2c, 0xf8, 0x57, 0x9a, 0xf0, 0x38, 0x0a, 0x39, 0xad, 0x16, 0xac, 0x92, 0x76, 0xf1, 0x7f, 0xce,
	0xc4, 0xd0, 0x2b, 0xd1, 0xbf, 0x56, 0x7b, 0xf6, 0x43, 0x01, 0xad, 0xbd, 0x14, 0x74, 0x04, 0x43,
	0xe2, 0x2c, 0x5c, 0xff, 0x9d, 0x43, 0x82, 0xd5, 0x95, 0x7e, 0x80, 0x8e, 0xe1, 0x48, 0x16, 0x5e,
	0xdb, 0xae, 0xe7, 0xcc, 0x75, 0x05, 0x3d, 0x86, 0x47, 0x3b, 0xc5, 0x60, 0x69, 0xbf, 0x75, 0x02,
	0xdb, 0x23, 0x8e, 0x3d, 0xff, 0x18, 0xb8, 0xcb, 0xe0, 0xc6, 0x77, 0xf4, 0x0e, 0x3a, 0x05, 0x73,
	0x97, 0x78, 0x6d, 0xfb, 0xfe, 0x87, 0x15, 0x99, 0x07, 0xee, 0xf2, 0xbd, 0xed, 0xb9, 0x73, 0xbd,
	0x7b, 0xf6, 0x04, 0x86, 0x5b, 0x9b, 0x45, 0x23, 0x50, 0xbd, 0xd5, 0xc2, 0x5d, 0x56, 0x03, 0xe8,
	0x30, 0xaa, 0x50, 0x73, 0xba, 0x75, 0x05, 0x6a, 0x1d, 0x42, 0x86, 0x5e, 0xc2, 0xa8, 0x8c, 0xb1,
	0xc4, 0x27, 0x7b, 0xe1, 0xad, 0xd6, 0x6d, 0x4c, 0x76, 0x1b, 0xa5, 0x0c, 0x1f, 0x58, 0x3f, 0x15,
	0x18, 0xd4, 0x8f, 0x80, 0x5e, 0x81, 0xda, 0xac, 0x63, 0xcb, 0xa8, 0xfd, 0x6e, 0xc6, 0xfd, 0xbd,
	0x3c, 0x35, 0x8f, 0x87, 0x0f, 0xd0, 0x73, 0xe8, 0x8b, 0x9b, 0xfc, 0x5d, 0x7e, 0xaf, 0x1d, 0xa6,
	0x2d, 0xed, 0x02, 0xe0, 0x77, 0x20, 0x90, 0x21, 0x79, 0x7b, 0xd1, 0x31, 0x1e, 0xfc, 0xb1, 0xd7,
	0x18, 0x7d, 0x39, 0x14, 0xff, 0x80, 0x67, 0xbf, 0x02, 0x00, 0x00, 0xff, 0xff, 0x01, 0x60, 0x30,
	0xea, 0x14, 0x04, 0x00, 0x00,
}
